// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.sphinxrs;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.ConcurrentHashMap

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_sphinxrs_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_sphinxrs_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize) {
        map.remove(handle)
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "sphinxrs"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "sphinxrs")
            .also { lib: _UniFFILib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
    }

    fun uniffi_sphinxrs_fn_func_pubkey_from_secret_key(`mySecretKey`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_derive_shared_secret(`theirPubkey`: RustBuffer.ByValue,`mySecretKey`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_encrypt(`plaintext`: RustBuffer.ByValue,`secret`: RustBuffer.ByValue,`nonce`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_decrypt(`ciphertext`: RustBuffer.ByValue,`secret`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_node_keys(`net`: RustBuffer.ByValue,`seed`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_mnemonic_from_entropy(`entropy`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_entropy_from_mnemonic(`mnemonic`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_mnemonic_to_seed(`mnemonic`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_entropy_to_seed(`entropy`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_build_request(`msg`: RustBuffer.ByValue,`secret`: RustBuffer.ByValue,`nonce`: Long,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_parse_response(`res`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_make_auth_token(`ts`: Int,`secret`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_run(`topic`: RustBuffer.ByValue,`args`: RustBuffer.ByValue,`state`: RustBuffer.ByValue,`msg1`: RustBuffer.ByValue,`expectedSequence`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_sha_256(`msg`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_create_onion(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`hops`: RustBuffer.ByValue,`payload`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_create_onion_msg(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`hops`: RustBuffer.ByValue,`json`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_create_keysend(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`hops`: RustBuffer.ByValue,`msat`: Long,`rhash`: RustBuffer.ByValue,`payload`: RustBuffer.ByValue,`currHeight`: Int,`preimage`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_create_keysend_msg(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`hops`: RustBuffer.ByValue,`msat`: Long,`rhash`: RustBuffer.ByValue,`msgJson`: RustBuffer.ByValue,`currHeight`: Int,`preimage`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_peel_onion(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`payload`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_peel_onion_msg(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`payload`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_peel_payment(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`payload`: RustBuffer.ByValue,`rhash`: RustBuffer.ByValue,`curHeight`: Int,`cltvExpiry`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_peel_payment_msg(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`payload`: RustBuffer.ByValue,`rhash`: RustBuffer.ByValue,`curHeight`: Int,`cltvExpiry`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_sign_ms(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_sign_bytes(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`msg`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_pubkey_from_seed(`seed`: RustBuffer.ByValue,`idx`: Long,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_root_sign_ms(`seed`: RustBuffer.ByValue,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_xpub_from_seed(`seed`: RustBuffer.ByValue,`time`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_set_network(`network`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_set_blockheight(`blockheight`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_add_contact(`seed`: RustBuffer.ByValue,`uniqueTime`: RustBuffer.ByValue,`state`: RustBuffer.ByValue,`toPubkey`: RustBuffer.ByValue,`routeHint`: RustBuffer.ByValue,`myAlias`: RustBuffer.ByValue,`myImg`: RustBuffer.ByValue,`amtMsat`: Long,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_get_contact(`state`: RustBuffer.ByValue,`pubkey`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_list_contacts(`state`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_get_subscription_topic(`seed`: RustBuffer.ByValue,`uniqueTime`: RustBuffer.ByValue,`state`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_initial_setup(`seed`: RustBuffer.ByValue,`uniqueTime`: RustBuffer.ByValue,`state`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_fetch_msgs(`seed`: RustBuffer.ByValue,`uniqueTime`: RustBuffer.ByValue,`state`: RustBuffer.ByValue,`lastMsgIdx`: Long,`limit`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_handle(`topic`: RustBuffer.ByValue,`payload`: RustBuffer.ByValue,`seed`: RustBuffer.ByValue,`uniqueTime`: RustBuffer.ByValue,`state`: RustBuffer.ByValue,`myAlias`: RustBuffer.ByValue,`myImg`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_send(`seed`: RustBuffer.ByValue,`uniqueTime`: RustBuffer.ByValue,`to`: RustBuffer.ByValue,`msgType`: Byte,`msgJson`: RustBuffer.ByValue,`state`: RustBuffer.ByValue,`myAlias`: RustBuffer.ByValue,`myImg`: RustBuffer.ByValue,`amtMsat`: Long,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_fn_func_make_media_token(`seed`: RustBuffer.ByValue,`uniqueTime`: RustBuffer.ByValue,`state`: RustBuffer.ByValue,`host`: RustBuffer.ByValue,`muid`: RustBuffer.ByValue,`to`: RustBuffer.ByValue,`expiry`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_sphinxrs_rustbuffer_alloc(`size`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_sphinxrs_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_sphinxrs_rustbuffer_free(`buf`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_sphinxrs_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_sphinxrs_checksum_func_pubkey_from_secret_key(
    ): Short
    fun uniffi_sphinxrs_checksum_func_derive_shared_secret(
    ): Short
    fun uniffi_sphinxrs_checksum_func_encrypt(
    ): Short
    fun uniffi_sphinxrs_checksum_func_decrypt(
    ): Short
    fun uniffi_sphinxrs_checksum_func_node_keys(
    ): Short
    fun uniffi_sphinxrs_checksum_func_mnemonic_from_entropy(
    ): Short
    fun uniffi_sphinxrs_checksum_func_entropy_from_mnemonic(
    ): Short
    fun uniffi_sphinxrs_checksum_func_mnemonic_to_seed(
    ): Short
    fun uniffi_sphinxrs_checksum_func_entropy_to_seed(
    ): Short
    fun uniffi_sphinxrs_checksum_func_build_request(
    ): Short
    fun uniffi_sphinxrs_checksum_func_parse_response(
    ): Short
    fun uniffi_sphinxrs_checksum_func_make_auth_token(
    ): Short
    fun uniffi_sphinxrs_checksum_func_run(
    ): Short
    fun uniffi_sphinxrs_checksum_func_sha_256(
    ): Short
    fun uniffi_sphinxrs_checksum_func_create_onion(
    ): Short
    fun uniffi_sphinxrs_checksum_func_create_onion_msg(
    ): Short
    fun uniffi_sphinxrs_checksum_func_create_keysend(
    ): Short
    fun uniffi_sphinxrs_checksum_func_create_keysend_msg(
    ): Short
    fun uniffi_sphinxrs_checksum_func_peel_onion(
    ): Short
    fun uniffi_sphinxrs_checksum_func_peel_onion_msg(
    ): Short
    fun uniffi_sphinxrs_checksum_func_peel_payment(
    ): Short
    fun uniffi_sphinxrs_checksum_func_peel_payment_msg(
    ): Short
    fun uniffi_sphinxrs_checksum_func_sign_ms(
    ): Short
    fun uniffi_sphinxrs_checksum_func_sign_bytes(
    ): Short
    fun uniffi_sphinxrs_checksum_func_pubkey_from_seed(
    ): Short
    fun uniffi_sphinxrs_checksum_func_root_sign_ms(
    ): Short
    fun uniffi_sphinxrs_checksum_func_xpub_from_seed(
    ): Short
    fun uniffi_sphinxrs_checksum_func_set_network(
    ): Short
    fun uniffi_sphinxrs_checksum_func_set_blockheight(
    ): Short
    fun uniffi_sphinxrs_checksum_func_add_contact(
    ): Short
    fun uniffi_sphinxrs_checksum_func_get_contact(
    ): Short
    fun uniffi_sphinxrs_checksum_func_list_contacts(
    ): Short
    fun uniffi_sphinxrs_checksum_func_get_subscription_topic(
    ): Short
    fun uniffi_sphinxrs_checksum_func_initial_setup(
    ): Short
    fun uniffi_sphinxrs_checksum_func_fetch_msgs(
    ): Short
    fun uniffi_sphinxrs_checksum_func_handle(
    ): Short
    fun uniffi_sphinxrs_checksum_func_send(
    ): Short
    fun uniffi_sphinxrs_checksum_func_make_media_token(
    ): Short
    fun ffi_sphinxrs_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_sphinxrs_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_sphinxrs_checksum_func_pubkey_from_secret_key() != 14435.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_derive_shared_secret() != 20125.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_encrypt() != 43446.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_decrypt() != 47725.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_node_keys() != 21192.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_mnemonic_from_entropy() != 32309.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_entropy_from_mnemonic() != 33294.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_mnemonic_to_seed() != 23084.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_entropy_to_seed() != 33710.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_build_request() != 31264.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_parse_response() != 12980.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_make_auth_token() != 13236.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_run() != 47350.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_sha_256() != 54805.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_create_onion() != 44069.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_create_onion_msg() != 23896.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_create_keysend() != 23547.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_create_keysend_msg() != 950.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_peel_onion() != 12462.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_peel_onion_msg() != 5286.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_peel_payment() != 53060.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_peel_payment_msg() != 53779.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_sign_ms() != 10078.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_sign_bytes() != 53352.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_pubkey_from_seed() != 23394.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_root_sign_ms() != 52594.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_xpub_from_seed() != 14922.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_set_network() != 65135.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_set_blockheight() != 43943.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_add_contact() != 51154.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_get_contact() != 19847.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_list_contacts() != 18133.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_get_subscription_topic() != 12763.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_initial_setup() != 63727.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_fetch_msgs() != 12460.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_handle() != 58131.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_send() != 22190.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_sphinxrs_checksum_func_make_media_token() != 53931.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Public interface members begin here.


public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}

public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): Int {
        return 4 + value.size
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}




data class Keys (
    var `secret`: String, 
    var `pubkey`: String
) {
    
}

public object FfiConverterTypeKeys: FfiConverterRustBuffer<Keys> {
    override fun read(buf: ByteBuffer): Keys {
        return Keys(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Keys) = (
            FfiConverterString.allocationSize(value.`secret`) +
            FfiConverterString.allocationSize(value.`pubkey`)
    )

    override fun write(value: Keys, buf: ByteBuffer) {
            FfiConverterString.write(value.`secret`, buf)
            FfiConverterString.write(value.`pubkey`, buf)
    }
}




data class RunReturn (
    var `topic0`: String?, 
    var `payload0`: ByteArray?, 
    var `topic1`: String?, 
    var `payload1`: ByteArray?, 
    var `topic2`: String?, 
    var `payload2`: ByteArray?, 
    var `stateMp`: ByteArray?, 
    var `msg`: String?, 
    var `msgType`: UByte?, 
    var `msgUuid`: String?, 
    var `msgIndex`: String?, 
    var `msgSender`: String?, 
    var `newBalance`: ULong?, 
    var `myContactInfo`: String?, 
    var `sentStatus`: String?, 
    var `sentTo`: String?, 
    var `settledStatus`: String?, 
    var `error`: String?
) {
    
}

public object FfiConverterTypeRunReturn: FfiConverterRustBuffer<RunReturn> {
    override fun read(buf: ByteBuffer): RunReturn {
        return RunReturn(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalByteArray.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalByteArray.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalByteArray.read(buf),
            FfiConverterOptionalByteArray.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUByte.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: RunReturn) = (
            FfiConverterOptionalString.allocationSize(value.`topic0`) +
            FfiConverterOptionalByteArray.allocationSize(value.`payload0`) +
            FfiConverterOptionalString.allocationSize(value.`topic1`) +
            FfiConverterOptionalByteArray.allocationSize(value.`payload1`) +
            FfiConverterOptionalString.allocationSize(value.`topic2`) +
            FfiConverterOptionalByteArray.allocationSize(value.`payload2`) +
            FfiConverterOptionalByteArray.allocationSize(value.`stateMp`) +
            FfiConverterOptionalString.allocationSize(value.`msg`) +
            FfiConverterOptionalUByte.allocationSize(value.`msgType`) +
            FfiConverterOptionalString.allocationSize(value.`msgUuid`) +
            FfiConverterOptionalString.allocationSize(value.`msgIndex`) +
            FfiConverterOptionalString.allocationSize(value.`msgSender`) +
            FfiConverterOptionalULong.allocationSize(value.`newBalance`) +
            FfiConverterOptionalString.allocationSize(value.`myContactInfo`) +
            FfiConverterOptionalString.allocationSize(value.`sentStatus`) +
            FfiConverterOptionalString.allocationSize(value.`sentTo`) +
            FfiConverterOptionalString.allocationSize(value.`settledStatus`) +
            FfiConverterOptionalString.allocationSize(value.`error`)
    )

    override fun write(value: RunReturn, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`topic0`, buf)
            FfiConverterOptionalByteArray.write(value.`payload0`, buf)
            FfiConverterOptionalString.write(value.`topic1`, buf)
            FfiConverterOptionalByteArray.write(value.`payload1`, buf)
            FfiConverterOptionalString.write(value.`topic2`, buf)
            FfiConverterOptionalByteArray.write(value.`payload2`, buf)
            FfiConverterOptionalByteArray.write(value.`stateMp`, buf)
            FfiConverterOptionalString.write(value.`msg`, buf)
            FfiConverterOptionalUByte.write(value.`msgType`, buf)
            FfiConverterOptionalString.write(value.`msgUuid`, buf)
            FfiConverterOptionalString.write(value.`msgIndex`, buf)
            FfiConverterOptionalString.write(value.`msgSender`, buf)
            FfiConverterOptionalULong.write(value.`newBalance`, buf)
            FfiConverterOptionalString.write(value.`myContactInfo`, buf)
            FfiConverterOptionalString.write(value.`sentStatus`, buf)
            FfiConverterOptionalString.write(value.`sentTo`, buf)
            FfiConverterOptionalString.write(value.`settledStatus`, buf)
            FfiConverterOptionalString.write(value.`error`, buf)
    }
}




data class VlsResponse (
    var `topic`: String, 
    var `bytes`: ByteArray, 
    var `sequence`: UShort, 
    var `cmd`: String, 
    var `state`: ByteArray
) {
    
}

public object FfiConverterTypeVlsResponse: FfiConverterRustBuffer<VlsResponse> {
    override fun read(buf: ByteBuffer): VlsResponse {
        return VlsResponse(
            FfiConverterString.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterString.read(buf),
            FfiConverterByteArray.read(buf),
        )
    }

    override fun allocationSize(value: VlsResponse) = (
            FfiConverterString.allocationSize(value.`topic`) +
            FfiConverterByteArray.allocationSize(value.`bytes`) +
            FfiConverterUShort.allocationSize(value.`sequence`) +
            FfiConverterString.allocationSize(value.`cmd`) +
            FfiConverterByteArray.allocationSize(value.`state`)
    )

    override fun write(value: VlsResponse, buf: ByteBuffer) {
            FfiConverterString.write(value.`topic`, buf)
            FfiConverterByteArray.write(value.`bytes`, buf)
            FfiConverterUShort.write(value.`sequence`, buf)
            FfiConverterString.write(value.`cmd`, buf)
            FfiConverterByteArray.write(value.`state`, buf)
    }
}





sealed class SphinxException: Exception() {
    // Each variant is a nested class
    
    class DerivePublicKey(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class DeriveSharedSecret(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class Encrypt(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class Decrypt(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadPubkey(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadSecret(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadNonce(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadCiper(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class InvalidNetwork(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadRequest(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadResponse(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadTopic(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadArgs(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadState(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadVelocity(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class InitFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class LssFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class VlsFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadChildIndex(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class BadMsg(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class AddContactFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class GetContactFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class HandleFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class FetchMsgsFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class SendFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class SetNetworkFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    
    class SetBlockheightFailed(
        val `r`: String
        ) : SphinxException() {
        override val message
            get() = "r=${ `r` }"
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<SphinxException> {
        override fun lift(error_buf: RustBuffer.ByValue): SphinxException = FfiConverterTypeSphinxError.lift(error_buf)
    }

    
}

public object FfiConverterTypeSphinxError : FfiConverterRustBuffer<SphinxException> {
    override fun read(buf: ByteBuffer): SphinxException {
        

        return when(buf.getInt()) {
            1 -> SphinxException.DerivePublicKey(
                FfiConverterString.read(buf),
                )
            2 -> SphinxException.DeriveSharedSecret(
                FfiConverterString.read(buf),
                )
            3 -> SphinxException.Encrypt(
                FfiConverterString.read(buf),
                )
            4 -> SphinxException.Decrypt(
                FfiConverterString.read(buf),
                )
            5 -> SphinxException.BadPubkey(
                FfiConverterString.read(buf),
                )
            6 -> SphinxException.BadSecret(
                FfiConverterString.read(buf),
                )
            7 -> SphinxException.BadNonce(
                FfiConverterString.read(buf),
                )
            8 -> SphinxException.BadCiper(
                FfiConverterString.read(buf),
                )
            9 -> SphinxException.InvalidNetwork(
                FfiConverterString.read(buf),
                )
            10 -> SphinxException.BadRequest(
                FfiConverterString.read(buf),
                )
            11 -> SphinxException.BadResponse(
                FfiConverterString.read(buf),
                )
            12 -> SphinxException.BadTopic(
                FfiConverterString.read(buf),
                )
            13 -> SphinxException.BadArgs(
                FfiConverterString.read(buf),
                )
            14 -> SphinxException.BadState(
                FfiConverterString.read(buf),
                )
            15 -> SphinxException.BadVelocity(
                FfiConverterString.read(buf),
                )
            16 -> SphinxException.InitFailed(
                FfiConverterString.read(buf),
                )
            17 -> SphinxException.LssFailed(
                FfiConverterString.read(buf),
                )
            18 -> SphinxException.VlsFailed(
                FfiConverterString.read(buf),
                )
            19 -> SphinxException.BadChildIndex(
                FfiConverterString.read(buf),
                )
            20 -> SphinxException.BadMsg(
                FfiConverterString.read(buf),
                )
            21 -> SphinxException.AddContactFailed(
                FfiConverterString.read(buf),
                )
            22 -> SphinxException.GetContactFailed(
                FfiConverterString.read(buf),
                )
            23 -> SphinxException.HandleFailed(
                FfiConverterString.read(buf),
                )
            24 -> SphinxException.FetchMsgsFailed(
                FfiConverterString.read(buf),
                )
            25 -> SphinxException.SendFailed(
                FfiConverterString.read(buf),
                )
            26 -> SphinxException.SetNetworkFailed(
                FfiConverterString.read(buf),
                )
            27 -> SphinxException.SetBlockheightFailed(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SphinxException): Int {
        return when(value) {
            is SphinxException.DerivePublicKey -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.DeriveSharedSecret -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.Encrypt -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.Decrypt -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadPubkey -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadSecret -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadNonce -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadCiper -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.InvalidNetwork -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadRequest -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadResponse -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadTopic -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadArgs -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadState -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadVelocity -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.InitFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.LssFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.VlsFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadChildIndex -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.BadMsg -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.AddContactFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.GetContactFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.HandleFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.FetchMsgsFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.SendFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.SetNetworkFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
            is SphinxException.SetBlockheightFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`r`)
            )
        }
    }

    override fun write(value: SphinxException, buf: ByteBuffer) {
        when(value) {
            is SphinxException.DerivePublicKey -> {
                buf.putInt(1)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.DeriveSharedSecret -> {
                buf.putInt(2)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.Encrypt -> {
                buf.putInt(3)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.Decrypt -> {
                buf.putInt(4)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadPubkey -> {
                buf.putInt(5)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadSecret -> {
                buf.putInt(6)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadNonce -> {
                buf.putInt(7)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadCiper -> {
                buf.putInt(8)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.InvalidNetwork -> {
                buf.putInt(9)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadRequest -> {
                buf.putInt(10)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadResponse -> {
                buf.putInt(11)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadTopic -> {
                buf.putInt(12)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadArgs -> {
                buf.putInt(13)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadState -> {
                buf.putInt(14)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadVelocity -> {
                buf.putInt(15)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.InitFailed -> {
                buf.putInt(16)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.LssFailed -> {
                buf.putInt(17)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.VlsFailed -> {
                buf.putInt(18)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadChildIndex -> {
                buf.putInt(19)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.BadMsg -> {
                buf.putInt(20)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.AddContactFailed -> {
                buf.putInt(21)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.GetContactFailed -> {
                buf.putInt(22)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.HandleFailed -> {
                buf.putInt(23)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.FetchMsgsFailed -> {
                buf.putInt(24)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.SendFailed -> {
                buf.putInt(25)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.SetNetworkFailed -> {
                buf.putInt(26)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
            is SphinxException.SetBlockheightFailed -> {
                buf.putInt(27)
                FfiConverterString.write(value.`r`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




public object FfiConverterOptionalUByte: FfiConverterRustBuffer<UByte?> {
    override fun read(buf: ByteBuffer): UByte? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUByte.read(buf)
    }

    override fun allocationSize(value: UByte?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterUByte.allocationSize(value)
        }
    }

    override fun write(value: UByte?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUByte.write(value, buf)
        }
    }
}




public object FfiConverterOptionalUShort: FfiConverterRustBuffer<UShort?> {
    override fun read(buf: ByteBuffer): UShort? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUShort.read(buf)
    }

    override fun allocationSize(value: UShort?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterUShort.allocationSize(value)
        }
    }

    override fun write(value: UShort?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUShort.write(value, buf)
        }
    }
}




public object FfiConverterOptionalUInt: FfiConverterRustBuffer<UInt?> {
    override fun read(buf: ByteBuffer): UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: UInt?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalULong: FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalByteArray: FfiConverterRustBuffer<ByteArray?> {
    override fun read(buf: ByteBuffer): ByteArray? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterByteArray.read(buf)
    }

    override fun allocationSize(value: ByteArray?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterByteArray.allocationSize(value)
        }
    }

    override fun write(value: ByteArray?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterByteArray.write(value, buf)
        }
    }
}
@Throws(SphinxException::class)

fun `pubkeyFromSecretKey`(`mySecretKey`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_pubkey_from_secret_key(FfiConverterString.lower(`mySecretKey`),_status)
})
}

@Throws(SphinxException::class)

fun `deriveSharedSecret`(`theirPubkey`: String, `mySecretKey`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_derive_shared_secret(FfiConverterString.lower(`theirPubkey`),FfiConverterString.lower(`mySecretKey`),_status)
})
}

@Throws(SphinxException::class)

fun `encrypt`(`plaintext`: String, `secret`: String, `nonce`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_encrypt(FfiConverterString.lower(`plaintext`),FfiConverterString.lower(`secret`),FfiConverterString.lower(`nonce`),_status)
})
}

@Throws(SphinxException::class)

fun `decrypt`(`ciphertext`: String, `secret`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_decrypt(FfiConverterString.lower(`ciphertext`),FfiConverterString.lower(`secret`),_status)
})
}

@Throws(SphinxException::class)

fun `nodeKeys`(`net`: String, `seed`: String): Keys {
    return FfiConverterTypeKeys.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_node_keys(FfiConverterString.lower(`net`),FfiConverterString.lower(`seed`),_status)
})
}

@Throws(SphinxException::class)

fun `mnemonicFromEntropy`(`entropy`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_mnemonic_from_entropy(FfiConverterString.lower(`entropy`),_status)
})
}

@Throws(SphinxException::class)

fun `entropyFromMnemonic`(`mnemonic`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_entropy_from_mnemonic(FfiConverterString.lower(`mnemonic`),_status)
})
}

@Throws(SphinxException::class)

fun `mnemonicToSeed`(`mnemonic`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_mnemonic_to_seed(FfiConverterString.lower(`mnemonic`),_status)
})
}

@Throws(SphinxException::class)

fun `entropyToSeed`(`entropy`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_entropy_to_seed(FfiConverterString.lower(`entropy`),_status)
})
}

@Throws(SphinxException::class)

fun `buildRequest`(`msg`: String, `secret`: String, `nonce`: ULong): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_build_request(FfiConverterString.lower(`msg`),FfiConverterString.lower(`secret`),FfiConverterULong.lower(`nonce`),_status)
})
}

@Throws(SphinxException::class)

fun `parseResponse`(`res`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_parse_response(FfiConverterString.lower(`res`),_status)
})
}

@Throws(SphinxException::class)

fun `makeAuthToken`(`ts`: UInt, `secret`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_make_auth_token(FfiConverterUInt.lower(`ts`),FfiConverterString.lower(`secret`),_status)
})
}

@Throws(SphinxException::class)

fun `run`(`topic`: String, `args`: String, `state`: ByteArray, `msg1`: ByteArray, `expectedSequence`: UShort?): VlsResponse {
    return FfiConverterTypeVlsResponse.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_run(FfiConverterString.lower(`topic`),FfiConverterString.lower(`args`),FfiConverterByteArray.lower(`state`),FfiConverterByteArray.lower(`msg1`),FfiConverterOptionalUShort.lower(`expectedSequence`),_status)
})
}


fun `sha256`(`msg`: ByteArray): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_sha_256(FfiConverterByteArray.lower(`msg`),_status)
})
}

@Throws(SphinxException::class)

fun `createOnion`(`seed`: String, `idx`: ULong, `time`: String, `network`: String, `hops`: String, `payload`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_create_onion(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),FfiConverterString.lower(`hops`),FfiConverterByteArray.lower(`payload`),_status)
})
}

@Throws(SphinxException::class)

fun `createOnionMsg`(`seed`: String, `idx`: ULong, `time`: String, `network`: String, `hops`: String, `json`: String): ByteArray {
    return FfiConverterByteArray.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_create_onion_msg(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),FfiConverterString.lower(`hops`),FfiConverterString.lower(`json`),_status)
})
}

@Throws(SphinxException::class)

fun `createKeysend`(`seed`: String, `idx`: ULong, `time`: String, `network`: String, `hops`: String, `msat`: ULong, `rhash`: String, `payload`: ByteArray, `currHeight`: UInt, `preimage`: String): ByteArray {
    return FfiConverterByteArray.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_create_keysend(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),FfiConverterString.lower(`hops`),FfiConverterULong.lower(`msat`),FfiConverterString.lower(`rhash`),FfiConverterByteArray.lower(`payload`),FfiConverterUInt.lower(`currHeight`),FfiConverterString.lower(`preimage`),_status)
})
}

@Throws(SphinxException::class)

fun `createKeysendMsg`(`seed`: String, `idx`: ULong, `time`: String, `network`: String, `hops`: String, `msat`: ULong, `rhash`: String, `msgJson`: String, `currHeight`: UInt, `preimage`: String): ByteArray {
    return FfiConverterByteArray.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_create_keysend_msg(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),FfiConverterString.lower(`hops`),FfiConverterULong.lower(`msat`),FfiConverterString.lower(`rhash`),FfiConverterString.lower(`msgJson`),FfiConverterUInt.lower(`currHeight`),FfiConverterString.lower(`preimage`),_status)
})
}

@Throws(SphinxException::class)

fun `peelOnion`(`seed`: String, `idx`: ULong, `time`: String, `network`: String, `payload`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_peel_onion(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),FfiConverterByteArray.lower(`payload`),_status)
})
}

@Throws(SphinxException::class)

fun `peelOnionMsg`(`seed`: String, `idx`: ULong, `time`: String, `network`: String, `payload`: ByteArray): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_peel_onion_msg(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),FfiConverterByteArray.lower(`payload`),_status)
})
}

@Throws(SphinxException::class)

fun `peelPayment`(`seed`: String, `idx`: ULong, `time`: String, `network`: String, `payload`: ByteArray, `rhash`: String, `curHeight`: UInt, `cltvExpiry`: UInt): ByteArray {
    return FfiConverterByteArray.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_peel_payment(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),FfiConverterByteArray.lower(`payload`),FfiConverterString.lower(`rhash`),FfiConverterUInt.lower(`curHeight`),FfiConverterUInt.lower(`cltvExpiry`),_status)
})
}

@Throws(SphinxException::class)

fun `peelPaymentMsg`(`seed`: String, `idx`: ULong, `time`: String, `network`: String, `payload`: ByteArray, `rhash`: String, `curHeight`: UInt, `cltvExpiry`: UInt): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_peel_payment_msg(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),FfiConverterByteArray.lower(`payload`),FfiConverterString.lower(`rhash`),FfiConverterUInt.lower(`curHeight`),FfiConverterUInt.lower(`cltvExpiry`),_status)
})
}

@Throws(SphinxException::class)

fun `signMs`(`seed`: String, `idx`: ULong, `time`: String, `network`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_sign_ms(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),_status)
})
}

@Throws(SphinxException::class)

fun `signBytes`(`seed`: String, `idx`: ULong, `time`: String, `network`: String, `msg`: ByteArray): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_sign_bytes(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),FfiConverterByteArray.lower(`msg`),_status)
})
}

@Throws(SphinxException::class)

fun `pubkeyFromSeed`(`seed`: String, `idx`: ULong, `time`: String, `network`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_pubkey_from_seed(FfiConverterString.lower(`seed`),FfiConverterULong.lower(`idx`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),_status)
})
}

@Throws(SphinxException::class)

fun `rootSignMs`(`seed`: String, `time`: String, `network`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_root_sign_ms(FfiConverterString.lower(`seed`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),_status)
})
}

@Throws(SphinxException::class)

fun `xpubFromSeed`(`seed`: String, `time`: String, `network`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_xpub_from_seed(FfiConverterString.lower(`seed`),FfiConverterString.lower(`time`),FfiConverterString.lower(`network`),_status)
})
}

@Throws(SphinxException::class)

fun `setNetwork`(`network`: String): RunReturn {
    return FfiConverterTypeRunReturn.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_set_network(FfiConverterString.lower(`network`),_status)
})
}

@Throws(SphinxException::class)

fun `setBlockheight`(`blockheight`: UInt): RunReturn {
    return FfiConverterTypeRunReturn.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_set_blockheight(FfiConverterUInt.lower(`blockheight`),_status)
})
}

@Throws(SphinxException::class)

fun `addContact`(`seed`: String, `uniqueTime`: String, `state`: ByteArray, `toPubkey`: String, `routeHint`: String, `myAlias`: String, `myImg`: String, `amtMsat`: ULong): RunReturn {
    return FfiConverterTypeRunReturn.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_add_contact(FfiConverterString.lower(`seed`),FfiConverterString.lower(`uniqueTime`),FfiConverterByteArray.lower(`state`),FfiConverterString.lower(`toPubkey`),FfiConverterString.lower(`routeHint`),FfiConverterString.lower(`myAlias`),FfiConverterString.lower(`myImg`),FfiConverterULong.lower(`amtMsat`),_status)
})
}

@Throws(SphinxException::class)

fun `getContact`(`state`: ByteArray, `pubkey`: String): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_get_contact(FfiConverterByteArray.lower(`state`),FfiConverterString.lower(`pubkey`),_status)
})
}

@Throws(SphinxException::class)

fun `listContacts`(`state`: ByteArray): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_list_contacts(FfiConverterByteArray.lower(`state`),_status)
})
}

@Throws(SphinxException::class)

fun `getSubscriptionTopic`(`seed`: String, `uniqueTime`: String, `state`: ByteArray): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_get_subscription_topic(FfiConverterString.lower(`seed`),FfiConverterString.lower(`uniqueTime`),FfiConverterByteArray.lower(`state`),_status)
})
}

@Throws(SphinxException::class)

fun `initialSetup`(`seed`: String, `uniqueTime`: String, `state`: ByteArray): RunReturn {
    return FfiConverterTypeRunReturn.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_initial_setup(FfiConverterString.lower(`seed`),FfiConverterString.lower(`uniqueTime`),FfiConverterByteArray.lower(`state`),_status)
})
}

@Throws(SphinxException::class)

fun `fetchMsgs`(`seed`: String, `uniqueTime`: String, `state`: ByteArray, `lastMsgIdx`: ULong, `limit`: UInt?): RunReturn {
    return FfiConverterTypeRunReturn.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_fetch_msgs(FfiConverterString.lower(`seed`),FfiConverterString.lower(`uniqueTime`),FfiConverterByteArray.lower(`state`),FfiConverterULong.lower(`lastMsgIdx`),FfiConverterOptionalUInt.lower(`limit`),_status)
})
}

@Throws(SphinxException::class)

fun `handle`(`topic`: String, `payload`: ByteArray, `seed`: String, `uniqueTime`: String, `state`: ByteArray, `myAlias`: String, `myImg`: String): RunReturn {
    return FfiConverterTypeRunReturn.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_handle(FfiConverterString.lower(`topic`),FfiConverterByteArray.lower(`payload`),FfiConverterString.lower(`seed`),FfiConverterString.lower(`uniqueTime`),FfiConverterByteArray.lower(`state`),FfiConverterString.lower(`myAlias`),FfiConverterString.lower(`myImg`),_status)
})
}

@Throws(SphinxException::class)

fun `send`(`seed`: String, `uniqueTime`: String, `to`: String, `msgType`: UByte, `msgJson`: String, `state`: ByteArray, `myAlias`: String, `myImg`: String, `amtMsat`: ULong): RunReturn {
    return FfiConverterTypeRunReturn.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_send(FfiConverterString.lower(`seed`),FfiConverterString.lower(`uniqueTime`),FfiConverterString.lower(`to`),FfiConverterUByte.lower(`msgType`),FfiConverterString.lower(`msgJson`),FfiConverterByteArray.lower(`state`),FfiConverterString.lower(`myAlias`),FfiConverterString.lower(`myImg`),FfiConverterULong.lower(`amtMsat`),_status)
})
}

@Throws(SphinxException::class)

fun `makeMediaToken`(`seed`: String, `uniqueTime`: String, `state`: ByteArray, `host`: String, `muid`: String, `to`: String, `expiry`: UInt): String {
    return FfiConverterString.lift(
    rustCallWithError(SphinxException) { _status ->
    _UniFFILib.INSTANCE.uniffi_sphinxrs_fn_func_make_media_token(FfiConverterString.lower(`seed`),FfiConverterString.lower(`uniqueTime`),FfiConverterByteArray.lower(`state`),FfiConverterString.lower(`host`),FfiConverterString.lower(`muid`),FfiConverterString.lower(`to`),FfiConverterUInt.lower(`expiry`),_status)
})
}


