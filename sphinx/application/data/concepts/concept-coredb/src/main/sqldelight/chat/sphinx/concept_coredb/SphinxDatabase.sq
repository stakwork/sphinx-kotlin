import chat.sphinx.wrapper_action_track.ActionTrackId;
import chat.sphinx.wrapper_action_track.ActionTrackMetaData;
import chat.sphinx.wrapper_action_track.ActionTrackType;
import chat.sphinx.wrapper_action_track.ActionTrackUploaded;
import chat.sphinx.wrapper_chat.ChatAlias;
import chat.sphinx.wrapper_chat.ChatGroupKey;
import chat.sphinx.wrapper_chat.ChatHost;
import chat.sphinx.wrapper_chat.ChatMetaData;
import chat.sphinx.wrapper_chat.ChatMuted;
import chat.sphinx.wrapper_chat.ChatName;
import chat.sphinx.wrapper_chat.ChatPrivate;
import chat.sphinx.wrapper_chat.ChatStatus;
import chat.sphinx.wrapper_chat.ChatType;
import chat.sphinx.wrapper_chat.ChatUnlisted;
import chat.sphinx.wrapper_chat.NotificationLevel;
import chat.sphinx.wrapper_common.DateTime;
import chat.sphinx.wrapper_common.PhotoUrl;
import chat.sphinx.wrapper_common.Push;
import chat.sphinx.wrapper_common.Seen;
import chat.sphinx.wrapper_common.chat.ChatUUID;
import chat.sphinx.wrapper_common.contact.Blocked;
import chat.sphinx.wrapper_common.contact.ContactIndex;
import chat.sphinx.wrapper_common.dashboard.ChatId;
import chat.sphinx.wrapper_common.dashboard.ContactId;
import chat.sphinx.wrapper_common.dashboard.DashboardItemId;
import chat.sphinx.wrapper_common.dashboard.InviteId;
import chat.sphinx.wrapper_common.feed.FeedId;
import chat.sphinx.wrapper_common.feed.FeedType;
import chat.sphinx.wrapper_common.feed.FeedUrl;
import chat.sphinx.wrapper_common.feed.Subscribed;
import chat.sphinx.wrapper_common.invite.InviteStatus;
import chat.sphinx.wrapper_common.lightning.LightningNodeAlias;
import chat.sphinx.wrapper_common.lightning.LightningNodePubKey;
import chat.sphinx.wrapper_common.lightning.LightningPaymentHash;
import chat.sphinx.wrapper_common.lightning.LightningPaymentRequest;
import chat.sphinx.wrapper_common.lightning.LightningRouteHint;
import chat.sphinx.wrapper_common.lightning.Sat;
import chat.sphinx.wrapper_common.lightning.ShortChannelId;
import chat.sphinx.wrapper_common.message.MessageId;
import chat.sphinx.wrapper_common.message.MessageUUID;
import chat.sphinx.wrapper_common.lightning.ServerIp;
import chat.sphinx.wrapper_common.subscription.Cron;
import chat.sphinx.wrapper_common.subscription.EndNumber;
import chat.sphinx.wrapper_common.subscription.SubscriptionCount;
import chat.sphinx.wrapper_common.subscription.SubscriptionId;
import chat.sphinx.wrapper_contact.ContactAlias;
import chat.sphinx.wrapper_contact.ContactStatus;
import chat.sphinx.wrapper_contact.DeviceId;
import chat.sphinx.wrapper_contact.NotificationSound;
import chat.sphinx.wrapper_contact.Owner;
import chat.sphinx.wrapper_contact.PrivatePhoto;
import chat.sphinx.wrapper_feed.FeedAuthor;
import chat.sphinx.wrapper_feed.FeedContentType;
import chat.sphinx.wrapper_feed.FeedDescription;
import chat.sphinx.wrapper_feed.FeedDestinationAddress;
import chat.sphinx.wrapper_feed.FeedDestinationSplit;
import chat.sphinx.wrapper_feed.FeedDestinationType;
import chat.sphinx.wrapper_feed.FeedEnclosureLength;
import chat.sphinx.wrapper_feed.FeedEnclosureType;
import chat.sphinx.wrapper_feed.FeedGenerator;
import chat.sphinx.wrapper_feed.FeedItemDuration;
import chat.sphinx.wrapper_feed.FeedItemsCount;
import chat.sphinx.wrapper_feed.FeedLanguage;
import chat.sphinx.wrapper_feed.FeedModelSuggested;
import chat.sphinx.wrapper_feed.FeedModelType;
import chat.sphinx.wrapper_feed.FeedPlayerSpeed;
import chat.sphinx.wrapper_feed.FeedTitle;
import chat.sphinx.wrapper_invite.InviteString;
import chat.sphinx.wrapper_message.ErrorMessage;
import chat.sphinx.wrapper_message.Flagged;
import chat.sphinx.wrapper_message.MessageContent;
import chat.sphinx.wrapper_message.MessageContentDecrypted;
import chat.sphinx.wrapper_message.MessageMUID;
import chat.sphinx.wrapper_message.MessagePerson;
import chat.sphinx.wrapper_message.MessageStatus;
import chat.sphinx.wrapper_message.MessageType;
import chat.sphinx.wrapper_message.RecipientAlias;
import chat.sphinx.wrapper_message.ReplyUUID;
import chat.sphinx.wrapper_message.SenderAlias;
import chat.sphinx.wrapper_message.ThreadUUID;
import chat.sphinx.wrapper_message_media.FileName;
import chat.sphinx.wrapper_message_media.MediaKey;
import chat.sphinx.wrapper_message_media.MediaKeyDecrypted;
import chat.sphinx.wrapper_message_media.MediaToken;
import chat.sphinx.wrapper_message_media.MediaType;
import chat.sphinx.wrapper_rsa.RsaPublicKey;
import java.io.File;
import kotlin.collections.List;


CREATE TABLE serverDbo(
    ip                          TEXT            AS ServerIp NOT NULL PRIMARY KEY,
    pub_key                     TEXT            AS LightningNodePubKey
);

serverGetAll:
SELECT *
FROM serverDbo;

serverGetPubKeyByIp:
SELECT *
FROM serverDbo
WHERE ip = ?;

serverUpdatePubKey:
UPDATE serverDbo
SET pub_key = :pub_key
WHERE ip = ?;

serverDeleteByIp:
DELETE FROM serverDbo
WHERE ip = ?;

serverUpsert {
    UPDATE serverDbo
    SET pub_key = :pub_key
    WHERE ip = :ip;

    INSERT OR IGNORE INTO serverDbo(
        ip,
        pub_key
    )
    VALUES (
        :ip,
        :pub_key
    );
}

CREATE TABLE chatDbo(
    id                          INTEGER         AS ChatId NOT NULL PRIMARY KEY,
    uuid                        TEXT            AS ChatUUID NOT NULL UNIQUE,
    name                        TEXT            AS ChatName,
    photo_url                   TEXT            AS PhotoUrl,
    type                        INTEGER         AS ChatType NOT NULL,
    status                      INTEGER         AS ChatStatus NOT NULL,
    contact_ids                 TEXT            AS List<ContactId> NOT NULL,
    is_muted                    INTEGER         AS ChatMuted NOT NULL,
    created_at                  INTEGER         AS DateTime NOT NULL,
    group_key                   TEXT            AS ChatGroupKey,
    host                        TEXT            AS ChatHost,
    price_per_message           INTEGER         AS Sat,
    escrow_amount               INTEGER         AS Sat,
    unlisted                    INTEGER         AS ChatUnlisted NOT NULL,
    private_tribe               INTEGER         AS ChatPrivate NOT NULL,
    owner_pub_key               TEXT            AS LightningNodePubKey,
    seen                        INTEGER         AS Seen NOT NULL,
    meta_data                   TEXT            AS ChatMetaData,
    my_photo_url                TEXT            AS PhotoUrl,
    my_alias                    TEXT            AS ChatAlias,
    pending_contact_ids         TEXT            AS List<ContactId>,
    latest_message_id           INTEGER         AS MessageId DEFAULT NULL,
    content_seen_at             INTEGER         AS DateTime,
    notify                      INTEGER         AS NotificationLevel,
    pin_message                 TEXT            AS MessageUUID DEFAULT NULL
);

chatUpdateSatusById:
UPDATE chatDbo
SET status = :status
WHERE id = ?;

chatUpdateLatestMessage:
UPDATE chatDbo
SET latest_message_id = :latest_message_id
WHERE id = ?;

chatUpdateMuted:
UPDATE chatDbo
SET is_muted = :muted
WHERE id = ?;

chatUpdateNotificationLevel:
UPDATE chatDbo
SET notify = :notify
WHERE id = ?;

chatUpdateContentSeenAt:
UPDATE chatDbo
SET content_seen_at = :content_seen_at
WHERE id = ?;

chatGetAll:
SELECT *
FROM chatDbo;

chatGetAllContact:
SELECT *
FROM chatDbo
WHERE type = 0; -- ChatType.CONVERSATION

chatGetAllTribe:
SELECT *
FROM chatDbo
WHERE type = 2; -- ChatType.TRIBE

chatGetAllIds:
SELECT id
FROM chatDbo;

chatGetAllByIds:
SELECT *
FROM chatDbo
WHERE id IN :chat_ids;

chatGetById:
SELECT *
FROM chatDbo
WHERE id = ?;

chatGetByUUID:
SELECT *
FROM chatDbo
WHERE uuid = ?;

chatGetConversationForContact:
SELECT *
FROM chatDbo
WHERE type = 0 AND contact_ids = ?
LIMIT 1;

chatGetMaxTribeId:
SELECT MAX(id) FROM chatDbo WHERE type = 2;

chatUpsert {
    UPDATE chatDbo
    SET name = :name,
        photo_url = :photo_url,
        status = :status,
        contact_ids = :contact_ids,
        is_muted = :is_muted,
        group_key = :group_key,
        host = :host,
        unlisted = :unlisted,
        private_tribe = :private_tribe,
        owner_pub_key = :owner_pub_key,
        seen = :seen,
        meta_data = :meta_data,
        my_photo_url = :my_photo_url,
        my_alias = :my_alias,
        pending_contact_ids = :pending_contact_ids,
        notify = :notify,
        pin_message = :pin_message
    WHERE id = :id;

    INSERT OR IGNORE INTO chatDbo(
        id,
        uuid,
        name,
        photo_url,
        type,
        status,
        contact_ids,
        is_muted,
        created_at,
        group_key,
        host,
        price_per_message,
        escrow_amount,
        unlisted,
        private_tribe,
        owner_pub_key,
        seen,
        meta_data,
        my_photo_url,
        my_alias,
        pending_contact_ids,
        notify,
        pin_message
    )
    VALUES (
        :id,
        :uuid,
        :name,
        :photo_url,
        :type,
        :status,
        :contact_ids,
        :is_muted,
        :created_at,
        :group_key,
        :host,
        :price_per_message,
        :escrow_amount,
        :unlisted,
        :private_tribe,
        :owner_pub_key,
        :seen,
        :meta_data,
        :my_photo_url,
        :my_alias,
        :pending_contact_ids,
        :notify,
        :pin_message
    );
}

chatDeleteById:
DELETE FROM chatDbo
WHERE id = ?;

chatUpdateMetaData:
UPDATE chatDbo
SET meta_data = :meta_data
WHERE id = ?;

chatUpdateSeen:
UPDATE chatDbo
SET seen = :seen
WHERE id = ?;

chatUpdatePinMessage:
UPDATE chatDbo
SET pin_message = :pin_message
WHERE id = ?;

chatUpdatePhotoUrlById:
UPDATE chatDbo
SET photo_url = :photo_url
WHERE id = ?;

chatUpdateTribeData:
UPDATE chatDbo
SET price_per_message = :price_per_message,
    escrow_amount = :escrow_amount,
    name = :name,
    photo_url = :photo_url,
    pin_message = :pin_message
WHERE id = ?;

CREATE INDEX idx_chat_id ON chatDbo(id);
CREATE INDEX idx_chat_type ON chatDbo(type);
CREATE INDEX idx_chat_latest_message_id ON chatDbo(latest_message_id);
CREATE INDEX idx_chat_name ON chatDbo(name);

CREATE TABLE contactDbo(
    id                          INTEGER         AS ContactId NOT NULL PRIMARY KEY,
    route_hint                  TEXT            AS LightningRouteHint,
    node_pub_key                TEXT            AS LightningNodePubKey,
    node_alias                  TEXT            AS LightningNodeAlias,
    alias                       TEXT            AS ContactAlias,
    photo_url                   TEXT            AS PhotoUrl,
    private_photo               INTEGER         AS PrivatePhoto NOT NULL,
    owner                       INTEGER         AS Owner NOT NULL,
    status                      INTEGER         AS ContactStatus NOT NULL,
    public_key                  TEXT            AS RsaPublicKey,
    device_id                   TEXT            AS DeviceId,
    created_at                  INTEGER         AS DateTime NOT NULL,
    updated_at                  INTEGER         AS DateTime NOT NULL,
    notification_sound          TEXT            AS NotificationSound,
    tip_amount                  INTEGER         AS Sat,
    invite_id                   INTEGER         AS InviteId,
    invite_status               INTEGER         AS InviteStatus,
    blocked                     INTEGER         AS Blocked NOT NULL DEFAULT 0
);

contactGetAllIds:
SELECT id
FROM contactDbo;

contactGetAll:
SELECT *
FROM contactDbo;

contactGetNotBlocked:
SELECT *
FROM contactDbo
WHERE blocked = 0;

contactGetBlocked:
SELECT *
FROM contactDbo
WHERE blocked = 1;

contactGetAllByIds:
SELECT *
FROM contactDbo
WHERE id IN :contact_ids;

contactGetById:
SELECT *
FROM contactDbo
WHERE id = ?;

contactGetByPubKey:
SELECT *
FROM contactDbo
WHERE node_pub_key = ?
ORDER BY id
LIMIT 1;

contactGetOwner:
SELECT *
FROM contactDbo
WHERE owner = 1
ORDER BY id
LIMIT 1;

contactGetLastContactIndex:
SELECT id
FROM contactDbo
ORDER BY id DESC
LIMIT 1;

contactUpsert {
    UPDATE contactDbo
    SET route_hint = :route_hint,
        node_pub_key = :node_pub_key,
        node_alias = :node_alias,
        alias = :alias,
        photo_url = :photo_url,
        private_photo = :private_photo,
        status = :status,
        public_key = :public_key,
        device_id = :device_id,
        updated_at = :updated_at,
        notification_sound = :notification_sound,
        tip_amount = :tip_amount,
        blocked = :blocked
    WHERE id = :id;

    INSERT OR IGNORE INTO contactDbo(
        id,
        route_hint,
        node_pub_key,
        node_alias,
        alias,
        photo_url,
        private_photo,
        owner,
        status,
        public_key,
        device_id,
        created_at,
        updated_at,
        notification_sound,
        tip_amount,
        blocked
    )
    VALUES (
        :id,
        :route_hint,
        :node_pub_key,
        :node_alias,
        :alias,
        :photo_url,
        :private_photo,
        :owner,
        :status,
        :public_key,
        :device_id,
        :created_at,
        :updated_at,
        :notification_sound,
        :tip_amount,
        :blocked
    );
}

contactUpdateInviteStatus:
UPDATE contactDbo
SET invite_status = :invite_status
WHERE invite_id = ?;

contactUpdateInvite:
UPDATE contactDbo
SET invite_status = :invite_status,
invite_id = :invite_id
WHERE id = ?;

contactUpdatePhotoUrl:
UPDATE contactDbo
SET photo_url = :photo_url
WHERE id = ?;

contactUpdateBlocked:
UPDATE contactDbo
SET blocked = :blocked
WHERE id = ?;

contactDeleteById:
DELETE FROM contactDbo
WHERE id = ?;

CREATE TABLE inviteDbo(
    id                          INTEGER         AS InviteId NOT NULL PRIMARY KEY,
    invite_string               TEXT            AS InviteString NOT NULL,
    invoice                     TEXT            AS LightningPaymentRequest,
--     welcome_message             TEXT,
    contact_id                  INTEGER         AS ContactId NOT NULL,
    status                      INTEGER         AS InviteStatus NOT NULL,
    price                       INTEGER         AS Sat,
    created_at                  INTEGER         AS DateTime NOT NULL
);

inviteGetAll:
SELECT *
FROM inviteDbo;

inviteGetById:
SELECT *
FROM inviteDbo
WHERE id = ?;

inviteGetByContactId:
SELECT *
FROM inviteDbo
WHERE contact_id = ?;

inviteUpdateStatus:
UPDATE inviteDbo
SET status = :status
WHERE id = ?;

inviteUpsert {
    UPDATE inviteDbo
    SET invite_string = :invite_string,
        invoice = :invoice,
        status = :status,
        price = :price
    WHERE id = :id;

    INSERT OR IGNORE INTO inviteDbo(
        id,
        invite_string,
        invoice,
        contact_id,
        status,
        price,
        created_at
    )
    VALUES (
        :id,
        :invite_string,
        :invoice,
        :contact_id,
        :status,
        :price,
        :created_at
    );
}

inviteDeleteById:
DELETE FROM inviteDbo
WHERE id = ?;

inviteDeleteByContactId:
DELETE FROM inviteDbo
WHERE contact_id = ?;

CREATE TABLE dashboardDbo(
    id                          TEXT            AS DashboardItemId NOT NULL PRIMARY KEY,
    contact_id                  INTEGER         AS ContactId,
    date                        INTEGER         AS DateTime NOT NULL,
    display_name                TEXT,
    muted                       INTEGER         AS ChatMuted NOT NULL DEFAULT 1,
    seen                        INTEGER         AS Seen NOT NULL,
    photo_url                   TEXT            AS PhotoUrl,

--  This is for contacts only. When a Chat of type Conversation comes in, the Contact held
--  here is updated as `include_in_return=false`
    include_in_return           INTEGER         AS Boolean DEFAULT 1 NOT NULL,

    latest_message_id           INTEGER         AS MessageId DEFAULT NULL
);

dashboardCount:
SELECT COUNT(*)
FROM dashboardDbo
WHERE include_in_return = 1;

dashboardPagination:
SELECT *
FROM dashboardDbo
WHERE include_in_return = 1
ORDER BY
    SUBSTR(id, 1, 1),
    date
LIMIT :limit OFFSET :offset;

dashboardUpdateLatestMessage:
UPDATE dashboardDbo
SET date = :date,
    latest_message_id = :latest_message_id
WHERE id = ?;

dashboardUpdateIncludeInReturn:
UPDATE dashboardDbo
SET include_in_return = :include_in_return
WHERE id = ?;

dashboardUpdateMuted:
UPDATE dashboardDbo
SET muted = :muted
WHERE id = ?;

dashboardUpdateTribe:
UPDATE dashboardDbo
SET display_name = :display_name,
    photo_url = :photo_url
WHERE id = ?;

dashboardUpdateConversation:
UPDATE dashboardDbo
SET display_name = :display_name,
    photo_url = :photo_url
WHERE contact_id = ?;

dashboardUpsert {
    UPDATE dashboardDbo
    SET display_name = :display_name,
        muted = :muted,
        seen = :seen,
        photo_url = :photo_url
    WHERE id = :id;

    INSERT OR IGNORE INTO dashboardDbo(
        id,
        contact_id,
        date,
        display_name,
        muted,
        seen,
        photo_url
    )
    VALUES (
        :id,
        :contact_id,
        :date,
        :display_name,
        :muted,
        :seen,
        :photo_url
    );
}

dashboardDeleteById:
DELETE FROM dashboardDbo
WHERE id = ?;

-- Cannot use inline classes if there are 23 or more columns
-- https://youtrack.jetbrains.com/issue/KT-45084
-- https://github.com/cashapp/sqldelight/issues/2266
--
-- Because of this, the messageMediaDbo table exists as an extension
-- where the messageID is utilized as the primary key.
CREATE TABLE messageDbo(
    id                          INTEGER         AS MessageId NOT NULL PRIMARY KEY,
    uuid                        TEXT            AS MessageUUID,
    chat_id                     INTEGER         AS ChatId NOT NULL,
    type                        INTEGER         AS MessageType NOT NULL,
    sender                      INTEGER         AS ContactId NOT NULL,
    receiver                    INTEGER         AS ContactId,
    amount                      INTEGER         AS Sat NOT NULL,
    payment_hash                TEXT            AS LightningPaymentHash,
    payment_request             TEXT            AS LightningPaymentRequest,
    date                        INTEGER         AS DateTime NOT NULL,
    expiration_date             INTEGER         AS DateTime,
    message_content             TEXT            AS MessageContent,
    message_content_decrypted   TEXT            AS MessageContentDecrypted,
    status                      INTEGER         AS MessageStatus NOT NULL,
    seen                        INTEGER         AS Seen NOT NULL,
    sender_alias                TEXT            AS SenderAlias,
    sender_pic                  TEXT            AS PhotoUrl,
    original_muid               TEXT            AS MessageMUID,
    reply_uuid                  TEXT            AS ReplyUUID,
    muid                        TEXT            AS MessageMUID,
    flagged                     INTEGER         AS Flagged NOT NULL DEFAULT 0,
    recipient_alias             TEXT            AS RecipientAlias,
    recipient_pic               TEXT            AS PhotoUrl,
    push                        INTEGER         AS Push DEFAULT 0,
    person                      TEXT            AS MessagePerson,
    thread_uuid                 TEXT            AS ThreadUUID,
    error_message               TEXT            AS ErrorMessage
);

messageGetAllReactionsByUUID:
SELECT *
FROM messageDbo
WHERE chat_id = :chat_id
AND (type = 29
AND reply_uuid IN :reply_uuids
);

messageGetAllMessagesByThreadUUID:
SELECT *
FROM messageDbo
WHERE chat_id = :chat_id
AND type != 29
AND thread_uuid IN :thread_uuid
AND status != 5;

messagesGetAllThreadUUIDByChatId:
SELECT *
FROM messageDbo
WHERE chat_id = :chat_id
AND type != 29
AND thread_uuid IS NOT NULL
ORDER BY date DESC;

messageGetAllPurchaseItemsByMUID:
SELECT *
FROM messageDbo
WHERE chat_id = :chat_id
AND type IN (7, 8, 9)
AND (muid IN :muids OR original_muid IN :muids);

messageGetAllByUUID:
SELECT *
FROM messageDbo
WHERE uuid IN :uuids;

messageGetById:
SELECT *
FROM messageDbo
WHERE id = ?;

messageGetByMuid:
SELECT *
FROM messageDbo
WHERE muid = ?
ORDER BY id ASC
LIMIT 1;

messageLastMemberRequestGetByContactId:
SELECT *
FROM messageDbo
WHERE sender = ?
AND chat_id = :chat_id
AND type = 19
ORDER BY id DESC
LIMIT 1;

messageGetByUUID:
SELECT *
FROM messageDbo
WHERE uuid = ?
LIMIT 1;

messageGetToShowByUUID:
SELECT *
FROM messageDbo
WHERE uuid = ?
AND type IN(0, 6)
LIMIT 1;

messageGetLowestProvisionalMessageId:
SELECT id
FROM messageDbo
WHERE id < 0
ORDER BY id
LIMIT 1;

messageGetMaxId:
SELECT MAX(id) FROM messageDbo;

messageGetIdByUUID:
SELECT id
FROM messageDbo
WHERE uuid = ?;

messageGetAllToShowByChatIdWithLimit:
SELECT *
FROM messageDbo
WHERE chat_id = ?
AND (
    type = 0 OR
    type = 2 OR
    type = 3 OR
    type = 5 OR
    type = 6 OR
    type = 14 OR
    type = 15 OR
    type = 16 OR
    type = 19 OR
    type = 20 OR
    type = 21 OR
    type = 22 OR
    type = 25 OR
    (type = 29 AND reply_uuid IS NULL) OR
    type = 32
)
ORDER BY date DESC
LIMIT :limit;

messageGetAllToShowByChatId:
SELECT *
FROM messageDbo
WHERE chat_id = ?
AND (
    type = 0 OR
    type = 2 OR
    type = 3 OR
    type = 5 OR
    type = 6 OR
    type = 14 OR
    type = 15 OR
    type = 16 OR
    type = 19 OR
    type = 20 OR
    type = 21 OR
    type = 22 OR
    type = 25 OR
    (type = 29 AND reply_uuid IS NULL) OR
    type = 32
)
ORDER BY date DESC;

messageGetUnseenIncomingMessageCountByChatId:
SELECT COUNT(*)
FROM messageDbo
WHERE sender != :ownerId
AND seen = 0
AND chat_id = ?;

messageGetUnseenIncomingMentionsCountByChatId:
SELECT COUNT(*)
FROM messageDbo
WHERE sender != :ownerId
AND seen = 0
AND push = 1
AND chat_id = ?;

messageGetUnseenIncomingMessageCountByChatType:
SELECT COUNT(*)
FROM messageDbo
LEFT JOIN chatDbo
    ON chatDbo.id = messageDbo.chat_id
WHERE messageDbo.sender != :ownerId
AND messageDbo.sender NOT IN :blocked_contact_ids
AND messageDbo.seen = 0
AND chatDbo.type = :chatType;

messageGetAmountSumForMessagesStartingWith:
SELECT SUM(amount)
FROM messageDbo
WHERE (chat_id IS NULL OR chat_id = 0)
AND (message_content LIKE :message_content1 OR message_content LIKE :message_content2);

messageGetMessagesByIds:
SELECT *
FROM messageDbo
WHERE id IN ?;

messagesSearchByTerm:
SELECT *
FROM messageDbo
WHERE chat_id = :chatId
AND status != 5
AND LOWER(message_content_decrypted) LIKE :searchTerm
ORDER BY date DESC;

messageUpdateSeenByChatId:
UPDATE messageDbo
SET seen = :seen
WHERE chat_id = ?;

messageUpdateContentDecrypted:
UPDATE messageDbo
SET message_content_decrypted = :message_content_decrypted
WHERE id = ?;

messageUpdateStatus:
UPDATE messageDbo
SET status = :status
WHERE id = ?;

messageUpdateType:
UPDATE messageDbo
SET type = :type
WHERE id = ?;

messageUpdateStatusByUUID:
UPDATE messageDbo
SET status = :status
WHERE uuid = ?;

messageUpdateInvoiceAsPaidByPaymentHash:
UPDATE messageDbo
SET status = 1
WHERE type = 2 AND payment_hash = ?;

messageUpdateFlagged:
UPDATE messageDbo
SET flagged = :flagged
WHERE id = ?;

messageUpdateUUID:
UPDATE messageDbo
SET uuid = :uuid
WHERE id = ?;

messageUpsert {
    UPDATE messageDbo
    SET status = :status,
        seen = :seen,
        sender_alias = :sender_alias,
        sender_pic = :sender_pic,
        original_muid = :original_muid,
        reply_uuid = :reply_uuid,
        type = :type,
        recipient_alias = :recipient_alias,
        recipient_pic = :recipient_pic,
        push = :push,
        person = :person,
        thread_uuid = :thread_uuid,
        error_message = :error_message
    WHERE id = :id;

    INSERT OR IGNORE INTO messageDbo(
        id,
        uuid,
        chat_id,
        type,
        sender,
        receiver,
        amount,
        payment_hash,
        payment_request,
        date,
        expiration_date,
        message_content,
        message_content_decrypted,
        status,
        seen,
        sender_alias,
        sender_pic,
        original_muid,
        reply_uuid,
        muid,
        flagged,
        recipient_alias,
        recipient_pic,
        push,
        person,
        thread_uuid,
        error_message
    )
    VALUES (
        :id,
        :uuid,
        :chat_id,
        :type,
        :sender,
        :receiver,
        :amount,
        :payment_hash,
        :payment_request,
        :date,
        :expiration_date,
        :message_content,
        :message_content_decrypted,
        :status,
        :seen,
        :sender_alias,
        :sender_pic,
        :original_muid,
        :reply_uuid,
        :muid,
        :flagged,
        :recipient_alias,
        :recipient_pic,
        :push,
        :person,
        :thread_uuid,
        :error_message
    );
}

messageDeleteById:
DELETE FROM messageDbo
WHERE id = ?;

messageDeleteByUUID:
DELETE FROM messageDbo
WHERE uuid = ?;


messageDeleteByChatId:
DELETE FROM messageDbo
WHERE chat_id = ?;

CREATE TABLE messageMediaDbo(
    id                          INTEGER         AS MessageId NOT NULL PRIMARY KEY,
    chat_id                     INTEGER         AS ChatId NOT NULL,
    media_key                   TEXT            AS MediaKey,
    media_key_decrypted         TEXT            AS MediaKeyDecrypted,
    media_type                  TEXT            AS MediaType NOT NULL,
    media_token                 TEXT            AS MediaToken NOT NULL,
    local_file                  TEXT            AS File,
    file_name                   TEXT            AS FileName
);

messageMediaGetById:
SELECT *
FROM messageMediaDbo
WHERE id = ?;

messageMediaUpdateMediaKeyDecrypted:
UPDATE messageMediaDbo
SET media_key_decrypted = :media_key_decrypted
WHERE id = ?;

messageMediaUpdateFile:
UPDATE messageMediaDbo
SET local_file = :local_file,
    file_name = ?
WHERE id = ?;

messageMediaGetByChatId:
SELECT *
FROM messageMediaDbo
WHERE chat_id = ?;

messageMediaGetAllDownloaded:
SELECT *
FROM messageMediaDbo
WHERE local_file IS NOT NULL;

messageMediaGetAllDownloadedByChatId:
SELECT *
FROM messageMediaDbo
WHERE chat_id = ? AND local_file IS NOT NULL;

messageMediaUpsert {
    UPDATE messageMediaDbo
    SET media_key = :media_key,
        media_type = :media_type,
        media_token = :media_token
    WHERE id = :id;

    INSERT OR IGNORE INTO messageMediaDbo(
        id,
        chat_id,
        media_key,
        media_key_decrypted,
        media_type,
        media_token,
        local_file,
        file_name
    )
    VALUES(
        :id,
        :chat_id,
        :media_key,
        :media_key_decrypted,
        :media_type,
        :media_token,
        :local_file,
        :file_name
    );
}

messageMediaDeleteById:
DELETE FROM messageMediaDbo
WHERE id = ?;

messageMediaDeleteByChatId:
DELETE FROM messageMediaDbo
WHERE chat_id = ?;

messageMediaDeleteAllMediaByChatId:
UPDATE messageMediaDbo
SET local_file = NULL
WHERE chat_id = ?;

messageMediaDeleteMediaById:
UPDATE messageMediaDbo
SET local_file = NULL
WHERE chat_id = ? AND id IN ?;

CREATE INDEX idx_message_chat_type_status ON messageDbo(chat_id, type, status);
CREATE INDEX idx_message_chat_type_reply_thread ON messageDbo(chat_id, type, reply_uuid, thread_uuid);
CREATE INDEX idx_message_uuid ON messageDbo(uuid);
CREATE INDEX idx_message_chat_date ON messageDbo(chat_id, date DESC);
CREATE INDEX idx_message_sender_chat_type ON messageDbo(sender, chat_id, type);
CREATE INDEX idx_message_id ON messageDbo(id);
CREATE INDEX idx_message_muid_original_muid ON messageDbo(muid, original_muid);

CREATE TABLE subscriptionDbo(
    id                          INTEGER         AS SubscriptionId NOT NULL PRIMARY KEY,
    cron                        TEXT            AS Cron NOT NULL,
    amount                      INTEGER         AS Sat NOT NULL,
    end_number                  INTEGER         AS EndNumber,
    count                       INTEGER         AS SubscriptionCount NOT NULL,
    end_date                    INTEGER         AS DateTime,
    ended                       INTEGER         AS Boolean DEFAULT 0 NOT NULL,
    paused                      INTEGER         AS Boolean DEFAULT 0 NOT NULL,
    created_at                  INTEGER         AS DateTime NOT NULL,
    updated_at                  INTEGER         AS DateTime NOT NULL,
    chat_id                     INTEGER         AS ChatId NOT NULL,
    contact_id                  INTEGER         AS ContactId NOT NULL
);

subscriptionGetById:
SELECT *
FROM subscriptionDbo
WHERE id = ?;

subscriptionGetLastActiveByContactId:
SELECT *
FROM subscriptionDbo
WHERE ended = 0 AND contact_id = ?
ORDER BY id DESC
LIMIT 1;

subscriptionGetAllByChatId:
SELECT *
FROM subscriptionDbo
WHERE chat_id = ?;

subscriptionGetAll:
SELECT *
FROM subscriptionDbo;

subscriptionUpsert {
    UPDATE subscriptionDbo
    SET cron = :cron,
        amount = :amount,
        end_number = :end_number,
        count = :count,
        end_date = :end_date,
        ended = :ended,
        paused = :paused,
        created_at = :created_at,
        updated_at = :updated_at,
        chat_id = :chat_id,
        contact_id = :contact_id
    WHERE id = :id;

    INSERT OR IGNORE INTO subscriptionDbo(
        id,
        cron,
        amount,
        end_number,
        count,
        end_date,
        ended,
        paused,
        created_at,
        updated_at,
        chat_id,
        contact_id
    )
    VALUES (
        :id,
        :cron,
        :amount,
        :end_number,
        :count,
        :end_date,
        :ended,
        :paused,
        :created_at,
        :updated_at,
        :chat_id,
        :contact_id
    );
}

subscriptionDeleteById:
DELETE FROM subscriptionDbo
WHERE id = ?;

subscriptionUpdatePaused:
UPDATE subscriptionDbo
SET paused = :paused
WHERE id = ?;

subscriptionUpdateEnded:
UPDATE subscriptionDbo
SET ended = :ended
WHERE id = ?;

subscriptionDeleteByContactId:
DELETE FROM subscriptionDbo
WHERE contact_id = ?;

CREATE TABLE feedDbo(
    id                          TEXT               AS FeedId NOT NULL PRIMARY KEY,
    feed_type                   INTEGER            AS FeedType NOT NULL,
    title                       TEXT               AS FeedTitle NOT NULL,
    description                 TEXT               AS FeedDescription,
    feed_url                    TEXT               AS FeedUrl NOT NULL,
    author                      TEXT               AS FeedAuthor,
    generator                   TEXT               AS FeedGenerator,
    image_url                   TEXT               AS PhotoUrl,
    owner_url                   TEXT               AS FeedUrl,
    link                        TEXT               AS FeedUrl,
    date_published              INTEGER            AS DateTime,
    date_updated                INTEGER            AS DateTime,
    content_type                TEXT               AS FeedContentType,
    language                    TEXT               AS FeedLanguage,
    items_count                 INTEGER            AS FeedItemsCount DEFAULT 0 NOT NULL,
    current_item_id             TEXT               AS FeedId,
    chat_id                     INTEGER            AS ChatId NOT NULL,
    subscribed                  INTEGER            AS Subscribed NOT NULL DEFAULT 1,
    last_played                 INTEGER            AS DateTime
);

feedUpsert {
    UPDATE feedDbo
    SET feed_type = :feed_type,
        title = :title,
        feed_url = :feed_url,
        author = :author,
        owner_url = :owner_url,
        link = :link,
        date_published = :date_published,
        date_updated = :date_updated,
        content_type = :content_type,
        language = :language,
        items_count = :items_count,
        chat_id = :chat_id
    WHERE id = :id;

    INSERT OR IGNORE INTO feedDbo(
        id,
        feed_type,
        title,
        description,
        feed_url,
        author,
        generator,
        image_url,
        owner_url,
        link,
        date_published,
        date_updated,
        content_type,
        language,
        items_count,
        current_item_id,
        chat_id,
        subscribed
    )
    VALUES (
        :id,
        :feed_type,
        :title,
        :description,
        :feed_url,
        :author,
        :generator,
        :image_url,
        :owner_url,
        :link,
        :date_published,
        :date_updated,
        :content_type,
        :language,
        :items_count,
        :current_item_id,
        :chat_id,
        :subscribed
    );
}

feedGetAll:
SELECT *
FROM feedDbo
ORDER BY id DESC;

feedGetAllSubscribed:
SELECT *
FROM feedDbo
WHERE (subscribed = 1 OR chat_id != 2147483647)
ORDER BY id DESC;

feedGetByChatId:
SELECT *
FROM feedDbo
WHERE chat_id = ?
ORDER BY id DESC
LIMIT 1;

feedGetAllByChatId:
SELECT *
FROM feedDbo
WHERE chat_id = ?
ORDER BY id DESC;

feedGetByChatIdAndType:
SELECT *
FROM feedDbo
WHERE chat_id = ?
AND feed_type = ?
ORDER BY id DESC
LIMIT 1;

feedGetAllSubscribedByFeedType:
SELECT *
FROM feedDbo
WHERE feed_type = ?
AND (subscribed = 1 OR chat_id != 2147483647)
ORDER BY id DESC;

feedGetAllByFeedType:
SELECT *
FROM feedDbo
WHERE feed_type = ?
ORDER BY id DESC;

feedGetAllByIds:
SELECT *
FROM feedDbo
WHERE id IN ?;

feedGetById:
SELECT *
FROM feedDbo
WHERE id = ?;

feedGetByIds:
SELECT *
FROM feedDbo
WHERE id IN ?;

feedGetSubscribedByTitle:
SELECT *
FROM feedDbo
WHERE (title LIKE :title)
AND (subscribed = 1 OR chat_id != 2147483647);

feedGetSubscribedByTitleAndType:
SELECT *
FROM feedDbo
WHERE (title LIKE :title)
AND feed_type = :feed_type
AND (subscribed = 1 || chat_id != 2147483647);

feedUpdateSubscribeAndChat:
UPDATE feedDbo
SET subscribed = :subscribed,
chat_id = :chat_id
WHERE id = ?;

feedUpdateSubscribe:
UPDATE feedDbo
SET subscribed = :subscribed
WHERE id = ?;

feedUpdateLastPlayed:
UPDATE feedDbo
SET last_played = :last_played
WHERE id = ?;

feedBatchUnsubscribe:
UPDATE feedDbo
SET subscribed = 0
WHERE id NOT IN ?;

feedDeleteById:
DELETE
FROM feedDbo
WHERE id = ?;

CREATE TABLE feedItemDbo(
    id                          TEXT               AS FeedId NOT NULL PRIMARY KEY,
    title                       TEXT               AS FeedTitle NOT NULL,
    description                 TEXT               AS FeedDescription,
    date_published              INTEGER            AS DateTime,
    date_updated                INTEGER            AS DateTime,
    author                      TEXT               AS FeedAuthor,
    content_type                TEXT               AS FeedContentType,
    enclosure_length            INTEGER            AS FeedEnclosureLength,
    enclosure_url               TEXT               AS FeedUrl NOT NULL,
    enclosure_type              TEXT               AS FeedEnclosureType,
    image_url                   TEXT               AS PhotoUrl,
    thumbnail_url               TEXT               AS PhotoUrl,
    link                        TEXT               AS FeedUrl,
    feed_id                     TEXT               AS FeedId NOT NULL,
    duration                    INTEGER            AS FeedItemDuration,
    local_file                  TEXT               AS File
);

feedItemUpsert {
    UPDATE feedItemDbo
    SET title = :title,
        description = :description,
        date_published = :date_published,
        date_updated = :date_updated,
        author = :author,
        content_type = :content_type,
        enclosure_length = :enclosure_length,
        enclosure_url = :enclosure_url,
        enclosure_type = :enclosure_type,
        image_url = :image_url,
        thumbnail_url = :thumbnail_url,
        link = :link,
        feed_id = :feed_id,
        duration = :duration
    WHERE id = :id;

    INSERT OR IGNORE INTO feedItemDbo(
        id,
        title,
        description,
        date_published,
        date_updated,
        author,
        content_type,
        enclosure_length,
        enclosure_url,
        enclosure_type,
        image_url,
        thumbnail_url,
        link,
        feed_id,
        duration
    )
    VALUES (
        :id,
        :title,
        :description,
        :date_published,
        :date_updated,
        :author,
        :content_type,
        :enclosure_length,
        :enclosure_url,
        :enclosure_type,
        :image_url,
        :thumbnail_url,
        :link,
        :feed_id,
        :duration
    );
}

feedItemGetById:
SELECT *
FROM feedItemDbo
WHERE id = ?;

feedItemsGetByFeedId:
SELECT *
FROM feedItemDbo
WHERE feed_id = ?
ORDER BY date_published DESC;

feedItemsGetByFeedIds:
SELECT *
FROM feedItemDbo
WHERE feed_id IN ?
ORDER BY date_published DESC;

feedItemGetAllDownloaded:
SELECT *
FROM feedItemDbo
WHERE local_file IS NOT NULL;

feedItemGetDownloadedByFeedId:
SELECT *
FROM feedItemDbo
WHERE feed_id = ? AND local_file IS NOT NULL;


feedItemDeleteById:
DELETE
FROM feedItemDbo
WHERE id = ?;

feedItemsDeleteOldByFeedId:
DELETE
FROM feedItemDbo
WHERE feed_id = ?
AND id NOT IN ?;

feedItemsDeleteByFeedId:
DELETE
FROM feedItemDbo
WHERE feed_id = ?;

feedItemUpdateLocalFile:
UPDATE feedItemDbo
SET local_file = :local_file
WHERE id = ?;

feedItemUpdateLocalFileByIds:
UPDATE feedItemDbo
SET local_file = :local_file
WHERE id IN ?;

feedItemDeleteAllDownloadedByFeedId:
UPDATE feedItemDbo
SET local_file = NULL
WHERE feed_id = ?;


CREATE TABLE feedModelDbo(
    id                          TEXT               AS FeedId NOT NULL PRIMARY KEY,
    type                        TEXT               AS FeedModelType NOT NULL,
    suggested                   REAL               AS FeedModelSuggested NOT NULL
);

feedModelUpsert {
    UPDATE feedModelDbo
    SET type = :type,
        suggested = :suggested
    WHERE id = :id;

    INSERT OR IGNORE INTO feedModelDbo(
        id,
        type,
        suggested
    )
    VALUES (
        :id,
        :type,
        :suggested
    );
}

feedModelGetById:
SELECT *
FROM feedModelDbo
WHERE id = ?;

feedModelDeleteById:
DELETE
FROM feedModelDbo
WHERE id = ?;

CREATE TABLE feedDestinationDbo(
    address                     TEXT            AS FeedDestinationAddress NOT NULL,
    split                       REAL            AS FeedDestinationSplit NOT NULL,
    type                        TEXT            AS FeedDestinationType NOT NULL,
    feed_id                     TEXT            AS FeedId NOT NULL,
    PRIMARY KEY (feed_id, address)
);

feedDestinationUpsert {
    UPDATE feedDestinationDbo
        SET address = :address,
            split = :split,
            type = :type
        WHERE address = :address
        AND feed_id = :feed_id;

    INSERT OR IGNORE INTO feedDestinationDbo(
        address,
        split,
        type,
        feed_id
    )
    VALUES (
        :address,
        :split,
        :type,
        :feed_id
    );
}

feedDestinationDeleteByFeedId:
DELETE FROM feedDestinationDbo
WHERE feed_id = ?;

feedDestinationsGetByFeedId:
SELECT *
FROM feedDestinationDbo
WHERE feed_id = ?;

CREATE TABLE actionTrackDbo(
    id                          INTEGER         AS ActionTrackId NOT NULL PRIMARY KEY AUTOINCREMENT,
    type                        INTEGER         AS ActionTrackType NOT NULL,
    meta_data                   TEXT            AS ActionTrackMetaData NOT NULL,
    uploaded                    INTEGER         AS ActionTrackUploaded NOT NULL
);

actionTrackUpsert {
    UPDATE actionTrackDbo
        SET type = :type,
            meta_data = :meta_data,
            uploaded = :uploaded
        WHERE id = :id;

    INSERT OR IGNORE INTO actionTrackDbo(
        type,
        meta_data,
        uploaded
    )
    VALUES (
        :type,
        :meta_data,
        :uploaded
    );
}

feedSearchGetCount:
SELECT COUNT(*)
FROM actionTrackDbo
WHERE type = 1
AND meta_data LIKE :meta_data;

actionTrackGetAll:
SELECT *
FROM actionTrackDbo;

actionTrackDeleteAll:
DELETE FROM chatDbo;

actionTrackGetByType:
SELECT *
FROM actionTrackDbo
WHERE type = ?;

actionTrackGetAllNotUploaded:
SELECT *
FROM actionTrackDbo
WHERE uploaded = 0;

actionTrackUpdateUploadedItems:
UPDATE actionTrackDbo
SET uploaded = 1
WHERE id IN :ids;

CREATE TABLE contentFeedStatusDbo(
    feed_id                         TEXT            AS FeedId NOT NULL PRIMARY KEY,
    feed_url                        TEXT            AS FeedUrl NOT NULL,
    subscription_status             INTEGER         AS Subscribed NOT NULL DEFAULT 0,
    chat_id                         INTEGER         AS ChatId,
    item_id                         TEXT            AS FeedId,
    sats_per_minute                 INTEGER         AS Sat,
    player_speed                    REAL            AS FeedPlayerSpeed
);

contentFeedStatusUpsert {
    UPDATE contentFeedStatusDbo
    SET feed_url = :feed_url,
        subscription_status = :subscription_status,
        chat_id = :chat_id,
        item_id = :item_id,
        sats_per_minute = :sats_per_minute,
        player_speed = :player_speed,
        subscription_status = :subscription_status
    WHERE feed_id = :feed_id;

    INSERT OR IGNORE INTO contentFeedStatusDbo(
           feed_id,
           feed_url,
           subscription_status,
           chat_id,
           item_id,
           sats_per_minute,
           player_speed
    )
    VALUES (
           :feed_id,
           :feed_url,
           :subscription_status,
           :chat_id,
           :item_id,
           :sats_per_minute,
           :player_speed
    );
}

contentFeedStatusUpdate:
UPDATE contentFeedStatusDbo
SET subscription_status = :subscription_status,
    chat_id = :chat_id,
    sats_per_minute = :sats_per_minute
WHERE feed_id = :feed_id;

contentFeedStatusUpdateItemId:
UPDATE contentFeedStatusDbo
SET item_id = :item_id
WHERE feed_id = :feed_id;

contentFeedStatusUpdateSubscriptionStatus:
UPDATE contentFeedStatusDbo
SET subscription_status = :subscription_status
WHERE feed_id = ?;

contentFeedStatusGetAll:
SELECT *
FROM contentFeedStatusDbo;

contentFeedStatusGetByIds:
SELECT *
FROM contentFeedStatusDbo
WHERE feed_id IN ?;

contentFeedStatusGetByFeedId:
SELECT *
FROM contentFeedStatusDbo
WHERE feed_id = ?;

contentFeedStatusDeleteAll:
DELETE FROM contentFeedStatusDbo;

contentFeedStatusDeleteByFeedId:
DELETE
FROM contentFeedStatusDbo
WHERE feed_id = ?;


CREATE TABLE contentEpisodeStatusDbo(
    item_id                         TEXT            AS FeedId NOT NULL,
    feed_id                         TEXT            AS FeedId NOT NULL,
    duration                        INTEGER         AS FeedItemDuration NOT NULL,
    current_time                    INTEGER         AS FeedItemDuration NOT NULL,
    played                          INTEGER         AS Boolean DEFAULT NULL,

    PRIMARY KEY (item_id, feed_id)
);

contentEpisodeStatusUpsert {
    UPDATE contentEpisodeStatusDbo
    SET duration = :duration,
        current_time = :current_time
    WHERE item_id = :item_id AND feed_id = :feed_id;

    INSERT OR IGNORE INTO contentEpisodeStatusDbo(
           item_id,
           feed_id,
           duration,
           current_time,
           played
    )
    VALUES (
           :item_id,
           :feed_id,
           :duration,
           :current_time,
           :played
    );
}

contentEpisodeStatusUpdatePlayed:
UPDATE contentEpisodeStatusDbo
SET played = :played
WHERE item_id = :item_id;

contentEpisodeStatusGetPlayedByItemId:
SELECT played
FROM contentEpisodeStatusDbo
WHERE item_id = :item_id;


contentEpisodeStatusGetAll:
SELECT *
FROM contentEpisodeStatusDbo;

contentEpisodeStatusGetByFeedIdAndItemId:
SELECT *
FROM contentEpisodeStatusDbo
WHERE feed_id = :feed_id AND item_id = :item_id;

contentEpisodeStatusGetByFeedIdAndItemIds:
SELECT *
FROM contentEpisodeStatusDbo
WHERE feed_id = :feed_id AND item_id IN ?;

contentEpisodeStatusGetByItemIds:
SELECT *
FROM contentEpisodeStatusDbo
WHERE item_id IN ?;

contentEpisodeStatusGetByFeedIds:
SELECT *
FROM contentEpisodeStatusDbo
WHERE feed_id IN ?;

contentEpisodeStatusDeleteAll:
DELETE FROM contentEpisodeStatusDbo;

contentEpisodeStatusDeleteByFeedId:
DELETE
FROM contentEpisodeStatusDbo
WHERE feed_id = ?;
